def get_coords(self):
    url = 'https://maps.googleapis.com/maps/api/geocode/json'

    params = {
        'address': self.place,
        'key': environ['g_maps_api_key']
    }

    response = self.session.get(url, params=params)
    response = response.json()
    
    try:

        coords = {
            'latitude':response['results'][0]['geometry']['location']['lat'],
            'longitude':response['results'][0]['geometry']['location']['lng']
        }
        return coords
    
    except IndexError:
        return None      

def get_photo_uris(self, names):
    uris = []
    for name in names:
        url = 'https://places.googleapis.com/v1/{}/media'.format(name)

        params = {
            'key' : environ['g_maps_api_key'],
            'maxHeightPx': 480,
            'skipHttpRedirect': True
        }

        uris.append(self.session.get(url, params=params).json()['photoUri'])

    return uris

def fetch_places_from_maps(self, data, type):
    url = 'https://places.googleapis.com/v1/places:searchNearby'

    headers = {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': environ['g_maps_api_key'],
        'X-Goog-FieldMask': '*'
    }

    data = {
        'locationRestriction': {
            'circle': {
                'center': self.coords,
                'radius': 20000 
            }
        },
        **data
    }


    r = self.session.post(url, headers=headers, json=data)
    # print(r.json())
    try:
        places = r.json()['places']
    except KeyError:
        print(r.json())
        return
    # print(f'TOTAL {type}: ', len(places))
    with open(f'output_json_files/{type}.json', 'w') as f:
        dump(r.json(), f, indent=4)
        
    for place in places:
        if 'userRatingCount' not in place:
            place['userRatingCount'] = 0
        if 'rating' not in place:
            place['rating'] = 1
        if 'googleMapsUri' not in place:
            place['googleMapsUri'] = 'https://www.google.com/maps/search/?api=1&query={}'.format(place['displayName']['text'])
        if 'photos' not in place:
            place['photos'] = []
        
    
    places.sort(key=lambda x: x['userRatingCount'], reverse=True)

    # for place in places:
    #     print(place['displayName']['text'])

    return places

def get_places(self, days):  
    data = {
        'includedTypes': [
            'amusement_center',
            'amusement_park',
            'aquarium',
            'bowling_alley',
            'casino',
            'hiking_area',
            'historical_landmark',
            'marina',
            'national_park',
            'night_club',
            'park',
            'tourist_attraction',
            'visitor_center',
            'zoo'],
        'maxResultCount': 20,
    }
    places = self.fetch_places_from_maps(data, 'places')
    response = {}
    response_display_names = []

    for i in range(days):
        day = 'day{}'.format(i+1)
        response[day] = []

        for j in range(3):
            place = {}

            place['name'] = places[i*3+j]['displayName']['text']
            response_display_names.append(place['name'])
            try:
                place['description'] = places[i*3+j]['editorialSummary']['text']
            except KeyError:
                place['description'] = places[i*3+j]['formattedAddress']
            except:
                place['description'] = 'No Description/Address available'

            place['gmaps_url'] = places[i*3+j]['googleMapsUri']
            
            photo_names = []
            for k in range(len(places[i*3+j]['photos'])):
                try:
                    photo_names.append(places[i*3+j]['photos'][k]['name'])
                except IndexError:
                    pass
            place['images'] = self.get_photo_uris(photo_names)
        
            response[day].append(place)
        

    return response, response_display_names



def save_in_db(data):
    db = MongoDbConfig()
    db.connect()
    collection = db.db['Schedules']
    id = collection.insert_one(data)
    db.disconnect()
    if id.acknowledged:
        add_schedule_in_profile(id.inserted_id, data)
        return str(id.inserted_id)

def add_schedule_in_profile(id, schedule):
    email = schedule['generatedBy']
    schedule['randomImage'] = schedule['places']['day1'][0]['images'][0]
    try:
        del schedule['generatedBy']
        del schedule['all_days']
        del schedule['places']
        del schedule['hotels']
        del schedule['restaurants']
        del schedule['budget']
    except:
        pass
    schedule['_id'] = str(schedule['_id'])
    db = MongoDbConfig()
    db.connect()
    collection = db.db['UserProfiles']

    collection.update_one(
        {'_id': email},
        {'$push': {'schedules': schedule}}
    )
    db.disconnect()